name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
#       fail-fast: false
      matrix:
        # specify a specific compiler to build with each OS separately
        include:
          - platform_name: linux
            os: ubuntu-latest
            cxx: g++
          - platform_name: macos
            os: macos-latest
            cxx: clang++
          # NOTE: CXX seems to be ignored on Windows, but specify it anyway for consistency
          - platform_name: windows
            os: windows-lates
            cxx: msvc

    steps:
    - uses: actions/checkout@v3
    
    - name: "Setup python"
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
   
    - name: "Setup conan"
      run: |
        python -m pip install --upgrade pip
        pip install conan==1.59.0
        conan profile new default --detect --force
        conan profile update settings.compiler.libcxx=libstdc++11 default
    
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

